{"ast":null,"code":"export const BASE_URL = 'https://auth.nomoreparties.co';\nexport const register = (email, password) => {\n  return fetch(`${BASE_URL}/signup`, {\n    method: 'POST',\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      email,\n      password\n    })\n  }).then(res => ({\n    message: 'некорректно заполнено одно из полей'\n  }));\n};\nexport const authorize = (email, password) => {\n  return fetch(`${BASE_URL}/signin`, {\n    method: 'POST',\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      email,\n      password\n    })\n  }).then(res => {\n    if (res.status === 400) {\n      res.status(400).res.send({\n        message: 'Не передано одно из полей'\n      });\n    } else if (res.status === 401) {\n      res.status(401).res.send({\n        message: 'Пользователь с таким email не найден'\n      });\n    }\n\n    return res.json();\n  });\n};\nexport const getContent = token => {\n  return fetch(`${BASE_URL}/users/me`, {\n    method: 'GET',\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json',\n      'Authorization': `Bearer ${token}`\n    }\n  }).then(res => {\n    if (!res.ok) {\n      return res.json().then(err => {\n        res.status(401).res.send(err.message);\n      });\n    }\n\n    return res.json();\n  });\n};","map":{"version":3,"sources":["/Users/family/dev/react-mesto-auth/src/utils/auth.js"],"names":["BASE_URL","register","email","password","fetch","method","headers","body","JSON","stringify","then","res","message","authorize","status","send","json","getContent","token","ok","err"],"mappings":"AAAA,OAAO,MAAMA,QAAQ,GAAG,+BAAjB;AAEP,OAAO,MAAMC,QAAQ,GAAG,CAACC,KAAD,EAAQC,QAAR,KAAqB;AAC3C,SAAOC,KAAK,CAAE,GAAEJ,QAAS,SAAb,EAAuB;AACjCK,IAAAA,MAAM,EAAE,MADyB;AAEjCC,IAAAA,OAAO,EAAE;AACP,gBAAU,kBADH;AAEP,sBAAgB;AAFT,KAFwB;AAMjCC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAAEP,MAAAA,KAAF;AAASC,MAAAA;AAAT,KAAf;AAN2B,GAAvB,CAAL,CAQNO,IARM,CAQAC,GAAD,KAGL;AAAEC,IAAAA,OAAO,EAAE;AAAX,GAHK,CARC,CAAP;AAYD,CAbM;AAeP,OAAO,MAAMC,SAAS,GAAG,CAACX,KAAD,EAAQC,QAAR,KAAqB;AAC5C,SAAOC,KAAK,CAAE,GAAEJ,QAAS,SAAb,EAAuB;AACjCK,IAAAA,MAAM,EAAE,MADyB;AAEjCC,IAAAA,OAAO,EAAE;AACP,gBAAU,kBADH;AAEP,sBAAgB;AAFT,KAFwB;AAMjCC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAAEP,MAAAA,KAAF;AAASC,MAAAA;AAAT,KAAf;AAN2B,GAAvB,CAAL,CAQNO,IARM,CAQAC,GAAD,IAAS;AACb,QAAIA,GAAG,CAACG,MAAJ,KAAe,GAAnB,EAAwB;AACtBH,MAAAA,GAAG,CAACG,MAAJ,CAAW,GAAX,EAAgBH,GAAhB,CAAoBI,IAApB,CAAyB;AAAEH,QAAAA,OAAO,EAAE;AAAX,OAAzB;AACD,KAFD,MAGK,IAAID,GAAG,CAACG,MAAJ,KAAe,GAAnB,EAAwB;AAC3BH,MAAAA,GAAG,CAACG,MAAJ,CAAW,GAAX,EAAgBH,GAAhB,CAAoBI,IAApB,CAAyB;AAAEH,QAAAA,OAAO,EAAE;AAAX,OAAzB;AACD;;AACD,WAAOD,GAAG,CAACK,IAAJ,EAAP;AACD,GAhBM,CAAP;AAiBD,CAlBM;AAoBP,OAAO,MAAMC,UAAU,GAAIC,KAAD,IAAW;AACnC,SAAOd,KAAK,CAAE,GAAEJ,QAAS,WAAb,EAAyB;AACnCK,IAAAA,MAAM,EAAE,KAD2B;AAEnCC,IAAAA,OAAO,EAAE;AACP,gBAAU,kBADH;AAEP,sBAAgB,kBAFT;AAGP,uBAAkB,UAASY,KAAM;AAH1B;AAF0B,GAAzB,CAAL,CAQNR,IARM,CAQAC,GAAD,IAAS;AACb,QAAI,CAACA,GAAG,CAACQ,EAAT,EAAa;AACX,aAAOR,GAAG,CAACK,IAAJ,GACJN,IADI,CACEU,GAAD,IAAS;AACbT,QAAAA,GAAG,CAACG,MAAJ,CAAW,GAAX,EAAgBH,GAAhB,CAAoBI,IAApB,CAAyBK,GAAG,CAACR,OAA7B;AACD,OAHI,CAAP;AAID;;AACD,WAAOD,GAAG,CAACK,IAAJ,EAAP;AACD,GAhBM,CAAP;AAiBD,CAlBM","sourcesContent":["export const BASE_URL = 'https://auth.nomoreparties.co';\n\nexport const register = (email, password) => {\n  return fetch(`${BASE_URL}/signup`, {\n    method: 'POST',\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({ email, password })\n  })\n  .then((res) => \n  \n  \n  ({ message: 'некорректно заполнено одно из полей' }));\n};\n\nexport const authorize = (email, password) => {\n  return fetch(`${BASE_URL}/signin`, {\n    method: 'POST',\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({ email, password })\n  })\n  .then((res) => {\n    if (res.status === 400) {\n      res.status(400).res.send({ message: 'Не передано одно из полей' });\n    }\n    else if (res.status === 401) {\n      res.status(401).res.send({ message: 'Пользователь с таким email не найден' });\n    }\n    return res.json();\n  });\n};\n\nexport const getContent = (token) => {\n  return fetch(`${BASE_URL}/users/me`, {\n    method: 'GET',\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json',\n      'Authorization': `Bearer ${token}`,\n    }\n  })\n  .then((res) => {\n    if (!res.ok) {\n      return res.json()\n        .then((err) => {\n          res.status(401).res.send(err.message);\n        });\n    }\n    return res.json()\n  })\n};"]},"metadata":{},"sourceType":"module"}