{"ast":null,"code":"class Api {\n  constructor(options) {\n    this._baseUrl = options.baseUrl;\n    this._headers = options.headers;\n    this._credentials = options.credentials;\n  }\n\n  getInitialsCards() {\n    return fetch(`${this._baseUrl}cards`, {\n      method: 'GET',\n      headers: this._headers,\n      credentials: this._credentials\n    }).then(res => {\n      if (res.ok) {\n        return res.json();\n      }\n\n      return Promise.reject(`Ошибка: ${res.status} - ${res.statusText}`);\n    });\n  }\n\n  getUserInfo() {\n    return fetch(`${this._baseUrl}users/me`, {\n      method: 'GET',\n      headers: this._headers,\n      credentials: this._credentials\n    }).then(res => {\n      if (res.ok) {\n        return res.json();\n      }\n\n      return Promise.reject(`Ошибка: ${res.status} - ${res.statusText}`);\n    });\n  }\n\n  setUserInfo(info) {\n    return fetch(`${this._baseUrl}users/me`, {\n      method: 'PATCH',\n      headers: this._headers,\n      credentials: this._credentials,\n      body: JSON.stringify(info)\n    }).then(res => {\n      if (res.ok) {\n        return res.json();\n      }\n\n      return Promise.reject(`Ошибка: ${res.status} - ${res.statusText}`);\n    });\n  }\n\n  setUserAvatar(link) {\n    return fetch(`${this._baseUrl}users/me/avatar`, {\n      method: 'PATCH',\n      headers: this._headers,\n      credentials: this._credentials,\n      body: JSON.stringify(link)\n    }).then(res => {\n      if (res.ok) {\n        return res.json();\n      }\n\n      return Promise.reject(`Ошибка: ${res.status} - ${res.statusText}`);\n    });\n  }\n\n  postCard(card) {\n    return fetch(`${this._baseUrl}cards`, {\n      method: 'POST',\n      headers: this._headers,\n      credentials: this._credentials,\n      body: JSON.stringify(card)\n    }).then(res => {\n      if (res.ok) {\n        return res.json();\n      }\n\n      return Promise.reject(`Ошибка: ${res.status} - ${res.statusText}`);\n    });\n  }\n\n  removeCard(id) {\n    return fetch(`${this._baseUrl}cards/${id}`, {\n      method: 'DELETE',\n      headers: this._headers,\n      credentials: this._credentials\n    }).then(res => {\n      if (res.ok) {\n        return res.json();\n      }\n\n      return Promise.reject(`Ошибка: ${res.status} - ${res.statusText}`);\n    });\n  }\n\n  changeLikeCardStatus(cardId, status) {\n    return fetch(`${this._baseUrl}cards/likes/${cardId}`, {\n      method: status ? 'PUT' : 'DELETE',\n      headers: this._headers,\n      credentials: this._credentials\n    }).then(res => {\n      if (res.ok) {\n        return res.json();\n      }\n\n      return Promise.reject(`Ошибка: ${res.status} - ${res.statusText}`);\n    });\n  }\n\n}\n\nconst api = new Api({\n  baseUrl: 'https://api.web.gavrik.students.nomoreparties.xyz/',\n  headers: {\n    authorization: localStorage.getItem('jwt'),\n    'Content-Type': 'application/json'\n  },\n  credentials: 'include'\n});\nexport default api;","map":{"version":3,"sources":["/Users/family/dev/react-mesto-auth/src/utils/api.js"],"names":["Api","constructor","options","_baseUrl","baseUrl","_headers","headers","_credentials","credentials","getInitialsCards","fetch","method","then","res","ok","json","Promise","reject","status","statusText","getUserInfo","setUserInfo","info","body","JSON","stringify","setUserAvatar","link","postCard","card","removeCard","id","changeLikeCardStatus","cardId","api","authorization","localStorage","getItem"],"mappings":"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","sourcesContent":["class Api {\n  constructor(options) {\n    this._baseUrl = options.baseUrl;\n    this._headers = options.headers;\n    this._credentials = options.credentials;\n  }\n\n  getInitialsCards() {\n    return fetch(`${this._baseUrl}cards`, {\n      method: 'GET',\n      headers: this._headers,\n      credentials: this._credentials,\n    }).then((res) => {\n      if (res.ok) {\n        return res.json();\n      }\n      return Promise.reject(`Ошибка: ${res.status} - ${res.statusText}`);\n    });\n  } \n\n  getUserInfo() {\n    return fetch(`${this._baseUrl}users/me`, {\n      method: 'GET',\n      headers: this._headers,\n      credentials: this._credentials,\n    }).then((res) => {\n      if (res.ok) {\n        return res.json();\n      }\n      return Promise.reject(`Ошибка: ${res.status} - ${res.statusText}`);\n    });\n  }\n\n  setUserInfo(info) {\n    return fetch(`${this._baseUrl}users/me`, {\n      method: 'PATCH',\n      headers: this._headers,\n      credentials: this._credentials,\n      body: JSON.stringify(info)\n    }).then((res) => {\n      if (res.ok) {\n        return res.json();\n      }\n      return Promise.reject(`Ошибка: ${res.status} - ${res.statusText}`);\n    });\n  }\n\n  setUserAvatar(link) {\n    return fetch(`${this._baseUrl}users/me/avatar`, {\n      method: 'PATCH',\n      headers: this._headers,\n      credentials: this._credentials,\n      body: JSON.stringify(link)\n    }).then((res) => {\n      if (res.ok) {\n        return res.json();\n      }\n      return Promise.reject(`Ошибка: ${res.status} - ${res.statusText}`);\n    });\n  }\n\n  postCard(card) {\n    return fetch(`${this._baseUrl}cards`, {\n      method: 'POST',\n      headers: this._headers,\n      credentials: this._credentials,\n      body: JSON.stringify(card)\n    }).then((res) => {\n      if (res.ok) {\n        return res.json();\n      }\n      return Promise.reject(`Ошибка: ${res.status} - ${res.statusText}`);\n    });\n  }\n\n  removeCard(id) {\n    return fetch(`${this._baseUrl}cards/${id}`, {\n      method: 'DELETE',\n      headers: this._headers,\n      credentials: this._credentials,\n    }).then((res) => {\n      if (res.ok) {\n        return res.json();\n      }\n      return Promise.reject(`Ошибка: ${res.status} - ${res.statusText}`);\n    });\n  }\n\n  changeLikeCardStatus(cardId, status) {\n    return fetch(`${this._baseUrl}cards/likes/${cardId}`, {\n      method: (status) ? 'PUT' : 'DELETE',\n      headers: this._headers,\n      credentials: this._credentials,\n    }).then((res) => {\n      if (res.ok) {\n        return res.json();\n      }\n      return Promise.reject(`Ошибка: ${res.status} - ${res.statusText}`);\n    });\n  }\n}\n\nconst api = new Api({\n  baseUrl: 'https://api.web.gavrik.students.nomoreparties.xyz/',\n  headers: {\n    authorization: localStorage.getItem('jwt'),\n    'Content-Type': 'application/json'\n  },\n  credentials: 'include',\n});\n\nexport default api;"]},"metadata":{},"sourceType":"module"}