{"ast":null,"code":"export var BASE_URL='https://api.web.gavrik.students.nomoreparties.xyz';// export const register = (password, email) => fetch(`${BASE_URL}/signup`, {\n//   method: 'POST',\n//   headers: {\n//     'Content-Type': 'application/json',\n//   },\n//   body: JSON.stringify({ password, email }),\n// })\n//   .then((res) => {\n//     if (!res.ok) {\n//       return res.json()\n//         .then((err) => {\n//           if (err.error) {\n//             return Promise.reject(`Ошибка: ${res.status} - ${res.statusText}`);\n//             // throw new BadRequestError(err.error);\n//           } else {\n//             return Promise.reject(`Ошибка: ${res.status} - ${res.statusText}`);\n//             // throw new BadRequestError(err.message);\n//           }\n//         });\n//     }\n//     return res.json();\n//   });\n// export const authorize = (password, email) => fetch(`${BASE_URL}/signin`, {\n//   method: 'POST',\n//   headers: {\n//     'Content-Type': 'application/json',\n//   },\n//   body: JSON.stringify({ password, email }),\n// })\n//   .then((res) => {\n//     if (res.status === 400) {\n//       return Promise.reject(`Ошибка: ${res.status} - ${res.statusText}`);\n//       // throw new BadRequestError('Не передано одно из полей');\n//     }\n//     else if (res.status === 401) {\n//       return Promise.reject(`Ошибка: ${res.status} - ${res.statusText}`);\n//       // throw new UnauthorizedError('Пользователь с таким email не найден');\n//     }\n//     return res.json();\n//   })\n//   .then((data) => {\n//     if (data.token) {\n//       localStorage.setItem('jwt', data.token);\n//       return data.token;\n//     }\n//   });\nexport var register=function register(email,password){return fetch(\"\".concat(BASE_URL,\"/signup\"),{method:'POST',headers:{'Accept':'application/json','Content-Type':'application/json'},body:JSON.stringify({email:email,password:password})}).then(function(res){if(res.ok){return res.json();}return Promise.reject(\"\\u041E\\u0448\\u0438\\u0431\\u043A\\u0430: \".concat(res.status,\" - \").concat(res.statusText));});};export var authorize=function authorize(email,password){return fetch(\"\".concat(BASE_URL,\"/signin\"),{method:'POST',headers:{'Accept':'application/json','Content-Type':'application/json'},body:JSON.stringify({email:email,password:password})}).then(function(res){if(res.ok){return res.json();}return Promise.reject(\"\\u041E\\u0448\\u0438\\u0431\\u043A\\u0430: \".concat(res.status,\" - \").concat(res.statusText));});};export var getContent=function getContent(token){return fetch(\"\".concat(BASE_URL,\"/users/me\"),{method:'GET',headers:{'Accept':'application/json','Content-Type':'application/json','Authorization':\"Bearer \".concat(token)}}).then(function(res){if(res.ok){return res.json();}return Promise.reject(\"\\u041E\\u0448\\u0438\\u0431\\u043A\\u0430: \".concat(res.status,\" - \").concat(res.statusText));});// .then((res) => res.json());\n// .then((data) => data);\n};","map":{"version":3,"sources":["/Users/family/dev/react-mesto-auth/src/utils/auth.js"],"names":["BASE_URL","register","email","password","fetch","method","headers","body","JSON","stringify","then","res","ok","json","Promise","reject","status","statusText","authorize","getContent","token"],"mappings":"AAAA,MAAO,IAAMA,CAAAA,QAAQ,CAAG,mDAAjB,CAGP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,MAAO,IAAMC,CAAAA,QAAQ,CAAG,QAAXA,CAAAA,QAAW,CAACC,KAAD,CAAQC,QAAR,CAAqB,CAC3C,MAAOC,CAAAA,KAAK,WAAIJ,QAAJ,YAAuB,CACjCK,MAAM,CAAE,MADyB,CAEjCC,OAAO,CAAE,CACP,SAAU,kBADH,CAEP,eAAgB,kBAFT,CAFwB,CAMjCC,IAAI,CAAEC,IAAI,CAACC,SAAL,CAAe,CAAEP,KAAK,CAALA,KAAF,CAASC,QAAQ,CAARA,QAAT,CAAf,CAN2B,CAAvB,CAAL,CAQNO,IARM,CAQD,SAACC,GAAD,CAAS,CACb,GAAIA,GAAG,CAACC,EAAR,CAAY,CACV,MAAOD,CAAAA,GAAG,CAACE,IAAJ,EAAP,CACD,CACD,MAAOC,CAAAA,OAAO,CAACC,MAAR,iDAA0BJ,GAAG,CAACK,MAA9B,eAA0CL,GAAG,CAACM,UAA9C,EAAP,CACD,CAbM,CAAP,CAcD,CAfM,CAiBP,MAAO,IAAMC,CAAAA,SAAS,CAAG,QAAZA,CAAAA,SAAY,CAAChB,KAAD,CAAQC,QAAR,CAAqB,CAC5C,MAAOC,CAAAA,KAAK,WAAIJ,QAAJ,YAAuB,CACjCK,MAAM,CAAE,MADyB,CAEjCC,OAAO,CAAE,CACP,SAAU,kBADH,CAEP,eAAgB,kBAFT,CAFwB,CAMjCC,IAAI,CAAEC,IAAI,CAACC,SAAL,CAAe,CAAEP,KAAK,CAALA,KAAF,CAASC,QAAQ,CAARA,QAAT,CAAf,CAN2B,CAAvB,CAAL,CAQNO,IARM,CAQD,SAACC,GAAD,CAAS,CACb,GAAIA,GAAG,CAACC,EAAR,CAAY,CACV,MAAOD,CAAAA,GAAG,CAACE,IAAJ,EAAP,CACD,CACD,MAAOC,CAAAA,OAAO,CAACC,MAAR,iDAA0BJ,GAAG,CAACK,MAA9B,eAA0CL,GAAG,CAACM,UAA9C,EAAP,CACD,CAbM,CAAP,CAcD,CAfM,CAiBP,MAAO,IAAME,CAAAA,UAAU,CAAG,QAAbA,CAAAA,UAAa,CAACC,KAAD,CAAW,CACnC,MAAOhB,CAAAA,KAAK,WAAIJ,QAAJ,cAAyB,CACnCK,MAAM,CAAE,KAD2B,CAEnCC,OAAO,CAAE,CACP,SAAU,kBADH,CAEP,eAAgB,kBAFT,CAGP,iCAA2Bc,KAA3B,CAHO,CAF0B,CAAzB,CAAL,CAQNV,IARM,CAQD,SAACC,GAAD,CAAS,CACb,GAAIA,GAAG,CAACC,EAAR,CAAY,CACV,MAAOD,CAAAA,GAAG,CAACE,IAAJ,EAAP,CACD,CACD,MAAOC,CAAAA,OAAO,CAACC,MAAR,iDAA0BJ,GAAG,CAACK,MAA9B,eAA0CL,GAAG,CAACM,UAA9C,EAAP,CACD,CAbM,CAAP,CAcE;AACA;AACH,CAjBM","sourcesContent":["export const BASE_URL = 'https://api.web.gavrik.students.nomoreparties.xyz';\n\n\n// export const register = (password, email) => fetch(`${BASE_URL}/signup`, {\n//   method: 'POST',\n//   headers: {\n//     'Content-Type': 'application/json',\n//   },\n//   body: JSON.stringify({ password, email }),\n// })\n//   .then((res) => {\n//     if (!res.ok) {\n//       return res.json()\n//         .then((err) => {\n//           if (err.error) {\n//             return Promise.reject(`Ошибка: ${res.status} - ${res.statusText}`);\n//             // throw new BadRequestError(err.error);\n//           } else {\n//             return Promise.reject(`Ошибка: ${res.status} - ${res.statusText}`);\n//             // throw new BadRequestError(err.message);\n//           }\n//         });\n//     }\n//     return res.json();\n//   });\n\n// export const authorize = (password, email) => fetch(`${BASE_URL}/signin`, {\n//   method: 'POST',\n//   headers: {\n//     'Content-Type': 'application/json',\n//   },\n//   body: JSON.stringify({ password, email }),\n// })\n//   .then((res) => {\n//     if (res.status === 400) {\n//       return Promise.reject(`Ошибка: ${res.status} - ${res.statusText}`);\n//       // throw new BadRequestError('Не передано одно из полей');\n//     }\n//     else if (res.status === 401) {\n//       return Promise.reject(`Ошибка: ${res.status} - ${res.statusText}`);\n//       // throw new UnauthorizedError('Пользователь с таким email не найден');\n//     }\n//     return res.json();\n//   })\n//   .then((data) => {\n//     if (data.token) {\n//       localStorage.setItem('jwt', data.token);\n//       return data.token;\n//     }\n//   });\n\nexport const register = (email, password) => {\n  return fetch(`${BASE_URL}/signup`, {\n    method: 'POST',\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({ email, password })\n  })\n  .then((res) => {\n    if (res.ok) {\n      return res.json();\n    }\n    return Promise.reject(`Ошибка: ${res.status} - ${res.statusText}`);\n  });\n};\n\nexport const authorize = (email, password) => {\n  return fetch(`${BASE_URL}/signin`, {\n    method: 'POST',\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({ email, password })\n  })\n  .then((res) => {\n    if (res.ok) {\n      return res.json();\n    }\n    return Promise.reject(`Ошибка: ${res.status} - ${res.statusText}`);\n  });\n};\n\nexport const getContent = (token) => {\n  return fetch(`${BASE_URL}/users/me`, {\n    method: 'GET',\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json',\n      'Authorization': `Bearer ${token}`,\n    }\n  })\n  .then((res) => {\n    if (res.ok) {\n      return res.json();\n    }\n    return Promise.reject(`Ошибка: ${res.status} - ${res.statusText}`);\n  })\n    // .then((res) => res.json());\n    // .then((data) => data);\n};"]},"metadata":{},"sourceType":"module"}