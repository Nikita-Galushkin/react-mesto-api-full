{"ast":null,"code":"export var BASE_URL='https://api.web.gavrik.students.nomoreparties.xyz';export var register=function register(password,email){return fetch(\"\".concat(BASE_URL,\"/signup\"),{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({password:password,email:email})}).then(function(res){if(!res.ok){return res.json().then(function(err){if(err.error){return Promise.reject(\"\\u041E\\u0448\\u0438\\u0431\\u043A\\u0430: \".concat(res.status,\" - \").concat(res.statusText));// throw new BadRequestError(err.error);\n}else{return Promise.reject(\"\\u041E\\u0448\\u0438\\u0431\\u043A\\u0430: \".concat(res.status,\" - \").concat(res.statusText));// throw new BadRequestError(err.message);\n}});}return res.json();});};export var authorize=function authorize(password,email){return fetch(\"\".concat(BASE_URL,\"/signin\"),{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({password:password,email:email})}).then(function(res){if(res.status===400){return Promise.reject(\"\\u041E\\u0448\\u0438\\u0431\\u043A\\u0430: \".concat(res.status,\" - \").concat(res.statusText));// throw new BadRequestError('Не передано одно из полей');\n}else if(res.status===401){return Promise.reject(\"\\u041E\\u0448\\u0438\\u0431\\u043A\\u0430: \".concat(res.status,\" - \").concat(res.statusText));// throw new UnauthorizedError('Пользователь с таким email не найден');\n}return res.json();}).then(function(data){if(data.token){localStorage.setItem('jwt',data.token);return data.token;}});};// export const register = (email, password) => {\n//   return fetch(`${BASE_URL}/signup`, {\n//     method: 'POST',\n//     // credentials: 'include',\n//     headers: {\n//       'Accept': 'application/json',\n//       'Content-Type': 'application/json'\n//     },\n//     body: JSON.stringify({ email, password })\n//   })\n//   .then((res) => {\n//     if (res.ok) {\n//       return res.json();\n//     }\n//     return Promise.reject(`Ошибка: ${res.status} - ${res.statusText}`);\n//   });\n// };\n// export const authorize = (email, password) => {\n//   return fetch(`${BASE_URL}/signin`, {\n//     method: 'POST',\n//     // credentials: 'include',\n//     headers: {\n//       'Accept': 'application/json',\n//       'Content-Type': 'application/json'\n//     },\n//     body: JSON.stringify({ email, password })\n//   })\n//   .then((res) => {\n//     if (res.ok) {\n//       return res.json();\n//     }\n//     return Promise.reject(`Ошибка: ${res.status} - ${res.statusText}`);\n//   });\n// };\nexport var getContent=function getContent(token){return fetch(\"\".concat(BASE_URL,\"/users/me\"),{method:'GET',// credentials: 'include',\nheaders:{'Accept':'application/json','Content-Type':'application/json','Authorization':\"Bearer \".concat(token)}}).then(function(res){if(res.ok){return res.json();}return Promise.reject(\"\\u041E\\u0448\\u0438\\u0431\\u043A\\u0430: \".concat(res.status,\" - \").concat(res.statusText));});};","map":{"version":3,"sources":["/Users/family/dev/react-mesto-auth/src/utils/auth.js"],"names":["BASE_URL","register","password","email","fetch","method","headers","body","JSON","stringify","then","res","ok","json","err","error","Promise","reject","status","statusText","authorize","data","token","localStorage","setItem","getContent"],"mappings":"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","sourcesContent":["export const BASE_URL = 'https://api.web.gavrik.students.nomoreparties.xyz';\n\n\nexport const register = (password, email) => fetch(`${BASE_URL}/signup`, {\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json',\n  },\n  body: JSON.stringify({ password, email }),\n})\n  .then((res) => {\n    if (!res.ok) {\n      return res.json()\n        .then((err) => {\n          if (err.error) {\n            return Promise.reject(`Ошибка: ${res.status} - ${res.statusText}`);\n            // throw new BadRequestError(err.error);\n          } else {\n            return Promise.reject(`Ошибка: ${res.status} - ${res.statusText}`);\n            // throw new BadRequestError(err.message);\n          }\n        });\n    }\n    return res.json();\n  });\n\nexport const authorize = (password, email) => fetch(`${BASE_URL}/signin`, {\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json',\n  },\n  body: JSON.stringify({ password, email }),\n})\n  .then((res) => {\n    if (res.status === 400) {\n      return Promise.reject(`Ошибка: ${res.status} - ${res.statusText}`);\n      // throw new BadRequestError('Не передано одно из полей');\n    }\n    else if (res.status === 401) {\n      return Promise.reject(`Ошибка: ${res.status} - ${res.statusText}`);\n      // throw new UnauthorizedError('Пользователь с таким email не найден');\n    }\n    return res.json();\n  })\n  .then((data) => {\n    if (data.token) {\n      localStorage.setItem('jwt', data.token);\n      return data.token;\n    }\n  });\n\n// export const register = (email, password) => {\n//   return fetch(`${BASE_URL}/signup`, {\n//     method: 'POST',\n//     // credentials: 'include',\n//     headers: {\n//       'Accept': 'application/json',\n//       'Content-Type': 'application/json'\n//     },\n//     body: JSON.stringify({ email, password })\n//   })\n//   .then((res) => {\n//     if (res.ok) {\n//       return res.json();\n//     }\n//     return Promise.reject(`Ошибка: ${res.status} - ${res.statusText}`);\n//   });\n// };\n\n// export const authorize = (email, password) => {\n//   return fetch(`${BASE_URL}/signin`, {\n//     method: 'POST',\n//     // credentials: 'include',\n//     headers: {\n//       'Accept': 'application/json',\n//       'Content-Type': 'application/json'\n//     },\n//     body: JSON.stringify({ email, password })\n//   })\n//   .then((res) => {\n//     if (res.ok) {\n//       return res.json();\n//     }\n//     return Promise.reject(`Ошибка: ${res.status} - ${res.statusText}`);\n//   });\n// };\n\nexport const getContent = (token) => {\n  return fetch(`${BASE_URL}/users/me`, {\n    method: 'GET',\n    // credentials: 'include',\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json',\n      'Authorization': `Bearer ${token}`,\n    }\n  })\n  .then((res) => {\n    if (res.ok) {\n      return res.json();\n    }\n    return Promise.reject(`Ошибка: ${res.status} - ${res.statusText}`);\n  })\n};"]},"metadata":{},"sourceType":"module"}