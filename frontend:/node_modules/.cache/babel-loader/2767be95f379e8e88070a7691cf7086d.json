{"ast":null,"code":"export const BASE_URL = 'https://api.web.gavrik.students.nomoreparties.xyz'; // export const register = (password, email) => fetch(`${BASE_URL}/signup`, {\n//   method: 'POST',\n//   headers: {\n//     'Content-Type': 'application/json',\n//   },\n//   body: JSON.stringify({ password, email }),\n// })\n//   .then((res) => {\n//     if (!res.ok) {\n//       return res.json()\n//         .then((err) => {\n//           if (err.error) {\n//             return Promise.reject(`Ошибка: ${res.status} - ${res.statusText}`);\n//             // throw new BadRequestError(err.error);\n//           } else {\n//             return Promise.reject(`Ошибка: ${res.status} - ${res.statusText}`);\n//             // throw new BadRequestError(err.message);\n//           }\n//         });\n//     }\n//     return res.json();\n//   });\n// export const authorize = (password, email) => fetch(`${BASE_URL}/signin`, {\n//   method: 'POST',\n//   headers: {\n//     'Content-Type': 'application/json',\n//   },\n//   body: JSON.stringify({ password, email }),\n// })\n//   .then((res) => {\n//     if (res.status === 400) {\n//       return Promise.reject(`Ошибка: ${res.status} - ${res.statusText}`);\n//       // throw new BadRequestError('Не передано одно из полей');\n//     }\n//     else if (res.status === 401) {\n//       return Promise.reject(`Ошибка: ${res.status} - ${res.statusText}`);\n//       // throw new UnauthorizedError('Пользователь с таким email не найден');\n//     }\n//     return res.json();\n//   })\n//   .then((data) => {\n//     if (data.token) {\n//       localStorage.setItem('jwt', data.token);\n//       return data.token;\n//     }\n//   });\n\nexport const register = (email, password) => {\n  return fetch(`${BASE_URL}/signup`, {\n    method: 'POST',\n    // credentials: 'include',\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      email,\n      password\n    })\n  }).then(res => {\n    if (res.ok) {\n      return res.json();\n    }\n\n    return Promise.reject(`Ошибка: ${res.status} - ${res.statusText}`);\n  });\n};\nexport const authorize = (email, password) => {\n  return fetch(`${BASE_URL}/signin`, {\n    method: 'POST',\n    // credentials: 'include',\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      email,\n      password\n    })\n  }).then(res => {\n    if (res.ok) {\n      return res.json();\n    }\n\n    return Promise.reject(`Ошибка: ${res.status} - ${res.statusText}`);\n  });\n};\nexport const getContent = token => {\n  return fetch(`${BASE_URL}/users/me`, {\n    method: 'GET',\n    // credentials: 'include',\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json',\n      'Authorization': `Bearer ${token}`\n    }\n  }).then(res => {\n    if (res.ok) {\n      return res.json();\n    }\n\n    return Promise.reject(`Ошибка: ${res.status} - ${res.statusText}`);\n  }) //   return fetch(`${BASE_URL}/users/me`, {\n  //     method: \"GET\",\n  //     headers: {\n  //       Accept: 'application/json',\n  //       'Content-Type': 'application/json',\n  //       Authorization: `Bearer ${token}`,\n  //     },\n  //   })\n  // .then((res) => res.json())\n  .then(data => data);\n};","map":{"version":3,"sources":["/Users/family/dev/react-mesto-auth/src/utils/auth.js"],"names":["BASE_URL","register","email","password","fetch","method","headers","body","JSON","stringify","then","res","ok","json","Promise","reject","status","statusText","authorize","getContent","token","data"],"mappings":"AAAA,OAAO,MAAMA,QAAQ,GAAG,mDAAjB,C,CAGP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,MAAMC,QAAQ,GAAG,CAACC,KAAD,EAAQC,QAAR,KAAqB;AAC3C,SAAOC,KAAK,CAAE,GAAEJ,QAAS,SAAb,EAAuB;AACjCK,IAAAA,MAAM,EAAE,MADyB;AAEjC;AACAC,IAAAA,OAAO,EAAE;AACP,gBAAU,kBADH;AAEP,sBAAgB;AAFT,KAHwB;AAOjCC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAAEP,MAAAA,KAAF;AAASC,MAAAA;AAAT,KAAf;AAP2B,GAAvB,CAAL,CASNO,IATM,CASAC,GAAD,IAAS;AACb,QAAIA,GAAG,CAACC,EAAR,EAAY;AACV,aAAOD,GAAG,CAACE,IAAJ,EAAP;AACD;;AACD,WAAOC,OAAO,CAACC,MAAR,CAAgB,WAAUJ,GAAG,CAACK,MAAO,MAAKL,GAAG,CAACM,UAAW,EAAzD,CAAP;AACD,GAdM,CAAP;AAeD,CAhBM;AAkBP,OAAO,MAAMC,SAAS,GAAG,CAAChB,KAAD,EAAQC,QAAR,KAAqB;AAC5C,SAAOC,KAAK,CAAE,GAAEJ,QAAS,SAAb,EAAuB;AACjCK,IAAAA,MAAM,EAAE,MADyB;AAEjC;AACAC,IAAAA,OAAO,EAAE;AACP,gBAAU,kBADH;AAEP,sBAAgB;AAFT,KAHwB;AAOjCC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAAEP,MAAAA,KAAF;AAASC,MAAAA;AAAT,KAAf;AAP2B,GAAvB,CAAL,CASNO,IATM,CASAC,GAAD,IAAS;AACb,QAAIA,GAAG,CAACC,EAAR,EAAY;AACV,aAAOD,GAAG,CAACE,IAAJ,EAAP;AACD;;AACD,WAAOC,OAAO,CAACC,MAAR,CAAgB,WAAUJ,GAAG,CAACK,MAAO,MAAKL,GAAG,CAACM,UAAW,EAAzD,CAAP;AACD,GAdM,CAAP;AAeD,CAhBM;AAkBP,OAAO,MAAME,UAAU,GAAIC,KAAD,IAAW;AACnC,SAAOhB,KAAK,CAAE,GAAEJ,QAAS,WAAb,EAAyB;AACnCK,IAAAA,MAAM,EAAE,KAD2B;AAEnC;AACAC,IAAAA,OAAO,EAAE;AACP,gBAAU,kBADH;AAEP,sBAAgB,kBAFT;AAGP,uBAAkB,UAASc,KAAM;AAH1B;AAH0B,GAAzB,CAAL,CASNV,IATM,CASAC,GAAD,IAAS;AACb,QAAIA,GAAG,CAACC,EAAR,EAAY;AACV,aAAOD,GAAG,CAACE,IAAJ,EAAP;AACD;;AACD,WAAOC,OAAO,CAACC,MAAR,CAAgB,WAAUJ,GAAG,CAACK,MAAO,MAAKL,GAAG,CAACM,UAAW,EAAzD,CAAP;AACD,GAdM,EAgBT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACI;AAxBK,GAyBJP,IAzBI,CAyBEW,IAAD,IAAUA,IAzBX,CAAP;AA0BD,CA3BM","sourcesContent":["export const BASE_URL = 'https://api.web.gavrik.students.nomoreparties.xyz';\n\n\n// export const register = (password, email) => fetch(`${BASE_URL}/signup`, {\n//   method: 'POST',\n//   headers: {\n//     'Content-Type': 'application/json',\n//   },\n//   body: JSON.stringify({ password, email }),\n// })\n//   .then((res) => {\n//     if (!res.ok) {\n//       return res.json()\n//         .then((err) => {\n//           if (err.error) {\n//             return Promise.reject(`Ошибка: ${res.status} - ${res.statusText}`);\n//             // throw new BadRequestError(err.error);\n//           } else {\n//             return Promise.reject(`Ошибка: ${res.status} - ${res.statusText}`);\n//             // throw new BadRequestError(err.message);\n//           }\n//         });\n//     }\n//     return res.json();\n//   });\n\n// export const authorize = (password, email) => fetch(`${BASE_URL}/signin`, {\n//   method: 'POST',\n//   headers: {\n//     'Content-Type': 'application/json',\n//   },\n//   body: JSON.stringify({ password, email }),\n// })\n//   .then((res) => {\n//     if (res.status === 400) {\n//       return Promise.reject(`Ошибка: ${res.status} - ${res.statusText}`);\n//       // throw new BadRequestError('Не передано одно из полей');\n//     }\n//     else if (res.status === 401) {\n//       return Promise.reject(`Ошибка: ${res.status} - ${res.statusText}`);\n//       // throw new UnauthorizedError('Пользователь с таким email не найден');\n//     }\n//     return res.json();\n//   })\n//   .then((data) => {\n//     if (data.token) {\n//       localStorage.setItem('jwt', data.token);\n//       return data.token;\n//     }\n//   });\n\nexport const register = (email, password) => {\n  return fetch(`${BASE_URL}/signup`, {\n    method: 'POST',\n    // credentials: 'include',\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({ email, password })\n  })\n  .then((res) => {\n    if (res.ok) {\n      return res.json();\n    }\n    return Promise.reject(`Ошибка: ${res.status} - ${res.statusText}`);\n  });\n};\n\nexport const authorize = (email, password) => {\n  return fetch(`${BASE_URL}/signin`, {\n    method: 'POST',\n    // credentials: 'include',\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({ email, password })\n  })\n  .then((res) => {\n    if (res.ok) {\n      return res.json();\n    }\n    return Promise.reject(`Ошибка: ${res.status} - ${res.statusText}`);\n  });\n};\n\nexport const getContent = (token) => {\n  return fetch(`${BASE_URL}/users/me`, {\n    method: 'GET',\n    // credentials: 'include',\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json',\n      'Authorization': `Bearer ${token}`,\n    }\n  })\n  .then((res) => {\n    if (res.ok) {\n      return res.json();\n    }\n    return Promise.reject(`Ошибка: ${res.status} - ${res.statusText}`);\n  })\n\n//   return fetch(`${BASE_URL}/users/me`, {\n//     method: \"GET\",\n//     headers: {\n//       Accept: 'application/json',\n//       'Content-Type': 'application/json',\n//       Authorization: `Bearer ${token}`,\n//     },\n//   })\n    // .then((res) => res.json())\n    .then((data) => data);\n};"]},"metadata":{},"sourceType":"module"}